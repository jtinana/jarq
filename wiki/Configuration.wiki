How JArq configure your application easily

= Firts step =

The clas GestorConfiguracion handles all configuration logic of your application, and thror the clas Configuracion allows you to lookup for any property.

= Details =

Just define a bean for the class GestorConfiguracion passing the rights arguments to itÂ´s constructor. For more details of every property just see the JavaDoc.

An example is:

<bean id="gestorConfiguracion" class="es.onlysolutions.arq.core.configuration.GestorConfiguracion">
         <!--DataSource to access the configuration table-->
        <constructor-arg ref="dataSource"/>
         <!--Table name-->
        <constructor-arg value="t_configuration" />
         <!--Column for the property name-->
        <constructor-arg  value="propertyname" />
         <!--Column value -->
        <constructor-arg value="value" />
         <!--Property file-->
        <constructor-arg value="/myproperties.cfg" />
        <!--Alternative log4j file-->
        <constructor-arg value="/loggingLog4j.cfg" />
         <!--App name-->
        <constructor-arg value="MyAppName" />
    </bean>

With this configuration you tells the GestorConfiguracion that reads all properties from the database table "t_configuration", and if the property is not found, will look at the properties file "myproperties.cfg", at the root of the classpath.

*All the properties are cached once they are read one time. You can clear all of them on the fly with the JMX bean*

== JMX ==

JArq provides a class called with can be registered as a normal MBean in the IoC container (see springframework documentation, JMX for more information).
This MBean has only one public operation, that clear all the properties cached, so they are re-read again when some code ask for any.